[{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"Ordinary Differential Equations (ODEs) describe rate change dependent variables respect single independent variable used many fields model behavior system. many good C libraries available solve (.e., integrate systems ODEs) SUNDIALS available Lawrence Livermore National Laboratory one popular well-respected C library solving non-stiff stiff systems ODEs. Currently, package provides interface CVODE CVODES function (serial version) library used solve ODEs (Initial Value Problems) calculate sensitivities. four exported functions package : cvode - interface CVODE function SUNDIALS solve system ODEs. cvodes - interface CVODES function SUNDIALS calculate forward sensitivites respect parameters ODE system. ida - interface IDA function SUNDIALS solve system Differential-Algebraic Equations (DAEs). cvsolve - convenient interface solve system ODEs discontinuities solution. future, plan provide interface solvers (.e., IDA/IDAS ARCODE library also. Right now, package serves test case providing interface SUNDIALS library R users. One advantage using package source code SUNDIALS library bundled package , require SUNDIALS library installed machine separately (sometimes non trivial Windows machine).","code":""},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"system-of-odes","dir":"Articles","previous_headings":"","what":"System of ODEs","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"described link , problem chemical kinetics, consists following three rate equations: dy1dt=−.04×y1+104×y2×y3dy2dt=.04×y1−104×y2×y3−3×107×y22dy3dt=3×107×y22  \\begin{aligned} \\frac{dy_1}{dt} &= -.04 \\times y_1 + 10^4 \\times y_2 \\times y_3  \\\\  \\frac{dy_2}{dt} &= .04 \\times y_1 - 10^4 \\times y_2 \\times y_3 - 3 \\times 10^7  \\times y_2^2 \\\\ \\frac{dy_3}{dt} &= 3 \\times 10^7 \\times y_2^2  \\end{aligned} time interval t=0.0t = 0.0 t=4×1010t = 4 \\times 10^{10} initial conditions: y1=1.0,y2=y3=0 y_1  = 1.0 , ~y_2 = y_3 = 0 problem stiff. original example , integrating system, also uses rootfinding feature find points y1=1×10−4 y_1 = 1 \\times 10^{-4}  y3=0.01 y_3 = 0.01  currently root-finding supported version. original example, package also solves problem BDF method, Newton iteration SUNDENSE dense linear solver, however, without user-supplied Jacobian routine (unlike original example). future versions may include ability provide Jacobian calculated analytically via automatic differentiation. CVODE uses scalar relative tolerance vector absolute tolerance (can provided input). Output printed decades t=0.4t = 0.4 t=4×1010t = 4 \\times 10^{10} example.","code":""},{"path":[]},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"using-r","dir":"Articles","previous_headings":"Writing the Differential Equations","what":"Using R","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"Differential equations can written R function Rcpp function. Differential equations function must written t represents time, y vector describing values states/entities ODE system time t p vector parameters used define ODEs. output function vector rate change entities y. key aspect keep mind signature function must function(t,y,p). example, try solve cv_Roberts_dns.c problem described , original code can found . example R function follows: p parameter vector values [-0.04 1e04 3e07].","code":"function(t, y, p){   # code to write differential equations   # using parameter vector (p) and state/entity vector (y)   # should return `ydot`, the vector representing   # rate of change of entities in `y`   # length of `ydot` must be equal to `y1 } ODE_R <- function(t, y, p){     ## initialize the derivative vector    ydot <- vector(mode = \"numeric\", length = length(y))        ## p (parameter vector input) is  [-0.04 1e04 3e07]        ydot[1] = p[1]*y[1] + p[2]*y[2]*y[3]    ydot[2] = -p[1]*y[1] - p[2]*y[2]*y[3] - p[3]*y[2]*y[2]    ydot[3] = p[3]*y[2]*y[2]     ydot      ## return ydot }"},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"using-rcpp","dir":"Articles","previous_headings":"Writing the Differential Equations","what":"Using Rcpp","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"Also, since package using Rcpp bundle C code, can use notation used Rcpp describe system ODEs. cv_Roberts_dns problem describe can described Rcpp function follows (indices C++ start 0, functions need declare return type, NumericVector every expression ends semicolon, ;) : re-write cvRoberts_dns.c example documentation CVODE.","code":"#include <Rcpp.h> using namespace Rcpp;  // [[Rcpp::export]] NumericVector ODE_Rcpp (double t, NumericVector y){    // Initialize ydot filled with zeros   NumericVector ydot(y.length());    // p (parameter vector) is [-0.04 1e04 3e07]   ydot[0] = p[0] * y[0] + p[1] * y[1] * y[2];   ydot[1] = -p[0]*y[0] - p[1]*y[1]*y[2] - p[2]*y[1]*y[1]   ydot[2] = p[2] * y[1] * y[1];    return ydot;  }"},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"putting-everything-together","dir":"Articles","previous_headings":"Writing the Differential Equations","what":"Putting everything together","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"entire R file create right hand side ODE function (calculates rates change) follows (also found ): final output df1 matrix first column time, second, third fourth column values y1, y2 y3 respectively.","code":"# ODEs described by an R function ODE_R <- function(t, y, p){     ## initialize the derivative vector    ydot <- vector(mode = \"numeric\", length = length(y))        ## p (parameter vector) is  [-0.04 1e04 3e07]        ydot[1] = p[1]*y[1] + p[2]*y[2]*y[3]    ydot[2] = -p[1]*y[1] - p[2]*y[2]*y[3] - p[3]*y[2]*y[2]    ydot[3] = p[3]*y[2]*y[2]     ydot      ## return ydot }  # ODEs can also be described using Rcpp Rcpp::sourceCpp(code = '  #include <Rcpp.h> using namespace Rcpp;  // [[Rcpp::export]] NumericVector ODE_Rcpp (double t, NumericVector y){    // Initialize ydot filled with zeros   NumericVector ydot(y.length());    // p (parameter vector) is [-0.04 1e04 3e07]   ydot[0] = p[0] * y[0] + p[1] * y[1] * y[2];   ydot[1] = -p[0]*y[0] - p[1]*y[1]*y[2] - p[2]*y[1]*y[1]   ydot[2] = p[2] * y[1] * y[1];    return ydot;  }')  # Generate time vector, IC and call cvode to solve the equations # R code to genrate time vector, IC and solve the equations time_vec <- c(0.0, 0.4, 4.0, 40.0, 4E2, 4E3, 4E4, 4E5, 4E6, 4E7, 4E8, 4E9, 4E10) IC <- c(1,0,0) params <- c(0.04, 10000, 30000000) reltol <- 1e-04 abstol <- c(1e-8,1e-14,1e-6)  ## Solving the ODEs using cvode function df1 <- cvode(time_vec, IC, ODE_R , params, reltol, abstol)           ## using R df2 <- cvode(time_vec, IC, ODE_Rcpp , params, reltol, abstol)        ## using Rcpp  ## Check that both solutions are identical # identical(df1, df2) > df1        [,1]         [,2]         [,3]       [,4]  [1,] 0e+00 1.000000e+00 0.000000e+00 0.00000000  [2,] 4e-01 9.851641e-01 3.386242e-05 0.01480205  [3,] 4e+00 9.055097e-01 2.240338e-05 0.09446793  [4,] 4e+01 7.158016e-01 9.185043e-06 0.28418924  [5,] 4e+02 4.505209e-01 3.222826e-06 0.54947590  [6,] 4e+03 1.832217e-01 8.943516e-07 0.81677741  [7,] 4e+04 3.898091e-02 1.621669e-07 0.96101893  [8,] 4e+05 4.936971e-03 1.984450e-08 0.99506301  [9,] 4e+06 5.170103e-04 2.069098e-09 0.99948299 [10,] 4e+07 5.204927e-05 2.082078e-10 0.99994795 [11,] 4e+08 5.184946e-06 2.073989e-11 0.99999482 [12,] 4e+09 5.246212e-07 2.098486e-12 0.99999948 [13,] 4e+10 6.043000e-08 2.417200e-13 0.99999994"},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"solving-a-system-of-differential-algebraic-equations","dir":"Articles","previous_headings":"","what":"Solving a system of Differential-Algebraic Equations","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"interface IDA solver also provided solve system Differential-Algebraic equations. system differential-algebraic equations system equations containing differential algebraic equations can written F(ẋ(t),x(t),t)=0 F(\\dot{x}(t), x(t), t) = 0  equations system written terms residuals require value x0x_0 ẋ0\\dot{x}_0 initial conditions. Writing previously solved equations system DAEs, , ẏ1=−p1y1+p2y2y3ẏ2=p1y1−p2y2y3−p3y221=y1+y2+y3 \\begin{aligned} \\dot{y}_1 &= -p_1y_1 + p_2y_2y_3  \\\\  \\dot{y}_2 &= p_1y_1 - p_2y_2y_3 - p_3y_2^2 \\\\ 1 &= y_1 + y_2 + y_3 \\end{aligned}  system DAEs can written terms residuals res1=−p1y1+p2y2y3−ẏ1res2=p1y1−p2y2y3−p3y22−ẏ2res3=y1+y2+y3−1 \\begin{aligned} res_1 &= -p_1y_1 + p_2y_2y_3 - \\dot{y}_1 \\\\  res_2 &= p_1y_1 - p_2y_2y_3 - p_3y_2^2 - \\dot{y}_2\\\\ res_3 &= y_1 + y_2 + y_3 - 1 \\end{aligned}  complete code solving system DAEs,","code":"DAE_R <- function(t, y, ydot, p){    # vector containing the residuals   res = vector(mode = \"numeric\", length = length(y))    # R indices start from 1   res[1] <- -0.04 * y[1] + 10000 * y[2] * y[3] - ydot[1]   res[2] <- -res[1] - 30000000 * y[2] * y[2] - ydot[2]   res[3] <- y[1] + y[2] + y[3] - 1.0    res }  # R code to genrate time vector, IC and solve the equations time_vec <- c(0.0, 0.4, 4.0, 40.0, 4E2, 4E3, 4E4, 4E5, 4E6, 4E7, 4E8, 4E9, 4E10) IC <- c(1,0,0)                  # Initial value of y IRes <- c(-0.4, 0.4, 0)         # Initial value of ydot params <- c(0.04, 10000, 30000000) reltol <- 1e-04 abstol <- c(1e-8,1e-14,1e-6)  ## Solving the DAEs using the ida function df1 <- sundialr::ida(time_vec, IC, IRes, DAE_R , params, reltol, abstol)"},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"solving-an-ode-system-with-discontinuties-in-solution","dir":"Articles","previous_headings":"","what":"Solving an ODE system with discontinuties in solution","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"cvsolve function defined sundialr package provides convenience interface solve ODEs one discontinuities solution. example system ODEs pharmacokinetics drug repeated bolus administration. Let’s look simple example multiple doses drug first-order degradation administered intravenously. ODE system drug dCdt=−kel*C \\frac{dC}{dt} = -k_{el} * C  CC concentration drug kelk_{el} elimination rate drug. RR code system also need define multiple doses given state applied (applied state model, CC). provided via EventsEvents dataframe (, TDOSETDOSE dosing dataframe). TDOSE data frame index state discontinuity applied (represented ID), times discontinuity applied (represented TIMES) value added value state time-point. typical example addition dose amount value concentration specified times, e.g., TDOSE data frame says value 100 added concentration 1st state (state system) times specified TIMES column. summary, ID represents index state discontinuity TIMES represents times discontinutiy applied VAL represents value added value state specified times. complete code simulating system  Note example , TSAMP sampling time solution desired. Also, even though Initial Value y1y_1 1 provided IC parameter, overwritten value 100 provided TDOSE data frame. general, values initial conditions overwritten values Events input.","code":"ODErepeated_R <- function(t, y, p){    # vector containing the right hand side gradients   ydot = vector(mode = \"numeric\", length = length(y))    # R indices start from 1   ydot[1] = -p[1]*y[1]    ydot  } TDOSE <- data.frame(ID = 1, TIMES = c(0, 10, 20, 30, 40, 50), VAL = 100) TDOSE #>   ID TIMES VAL #> 1  1     0 100 #> 2  1    10 100 #> 3  1    20 100 #> 4  1    30 100 #> 5  1    40 100 #> 6  1    50 100 # Example of solving a set of ODEs with multiple discontinuities using cvsolve # A simple One dimensional equation, y = -0.1 * y # ODEs described by an R function ODE_R <- function(t, y, p){    # vector containing the right hand side gradients   ydot = vector(mode = \"numeric\", length = length(y))    # R indices start from 1   ydot[1] = -p[1]*y[1]    ydot  }  # R code to generate time vector, IC and solve the equations TSAMP <- seq(from = 0, to = 100, by = 0.1)      # sampling time points IC <- c(1) params <- c(0.1)  # A dataset describing the dosing at times at which additions to y[1] are to be done # Names of the columns don't matter, but they MUST be in the order of state index, # times and Values at discontinuity. TDOSE <- data.frame(ID = 1, TIMES = c(0, 10, 20, 30, 40, 50), VAL = 100)  df1 <- sundialr::cvsolve(TSAMP, c(1), ODE_R, params)         # solving without any discontinuity df2 <- sundialr::cvsolve(TSAMP, c(1), ODE_R, params, TDOSE)  # solving with discontinuity  ## Plot the solution with discontinuities ## first column is time, second column is the state time <- df2[,1] y1 <- df2[,2] plot(time, y1, type = \"l\", lty = 1, main = \"An ODE system with discontinuties\", frame.plot = F)"},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"system-of-odes-for-parameter-sensitivities","dir":"Articles","previous_headings":"","what":"System of ODEs for Parameter Sensitivities","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"Sensitivity respect parameters ODE system can calculated using CVODES function. package implements Forward Sensitivity Analysis CVODES function (see example cvRoberts_FSA_dns.c link ). Briefly, given ODE system described dy1dt=−p1y1+p2y2y3dy2dt=p1y1−p2y2y3−p3y22dy3dt=p3y22  \\begin{aligned} \\frac{dy_1}{dt} &= -p_1y_1 + p_2y_2y_3  \\\\  \\frac{dy_2}{dt} &= p_1y_1 - p_2y_2y_3 - p_3y_2^2 \\\\ \\frac{dy_3}{dt} &= p_3y_2^2  \\end{aligned}  initial conditions (.e., y1=0,y2=y3=0y_1 = 0, y_2 = y_3 = 0) p1=0.04,p2=104,p3=3×107p_1 = 0.04, \\quad p_2 = 10^4, \\quad p_3 = 3\\times10^7. system Sensitivity equations (taken cvs_guide.pdf) solved can given dsdt=[−p1p2y3p2y2p1−p2y3−2p3y2−p2y202p3y20]si+∂f∂pi,si(t0)=[000],=1,2,3 \\begin{aligned} \\frac{ds}{dt} =  \\left[\\begin{array} {ccc} -p_1 & p_2y_3 & p_2y_2 \\\\ p_1 & -p_2y_3-2p_3y_2 & -p_2y_2 \\\\ 0 & 2p_3y_2 & 0 \\end{array}\\right]s_i + \\frac{\\partial f}{\\partial p_i},  \\quad s_i(t_0) =  \\left[\\begin{array}  {c} 0 \\\\ 0 \\\\ 0 \\end{array}\\right], \\quad = 1, 2, 3  \\end{aligned}  ∂f∂p1=[−y1y10],∂f∂p2=[y2y3−y2y30],∂f∂p3=[0−y22y22] \\frac{\\partial f}{\\partial p_1} = \\left[\\begin{array}  {c} -y_1 \\\\ y_1 \\\\ 0 \\end{array}\\right], \\quad \\frac{\\partial f}{\\partial p_2} = \\left[\\begin{array}  {c} y_2y_3 \\\\ -y_2y_3 \\\\ 0 \\end{array}\\right], \\quad \\frac{\\partial f}{\\partial p_3} = \\left[\\begin{array}  {c} 0 \\\\ -y_2^2 \\\\ y_2^2 \\end{array}\\right]  original CVODES interface SUNDIALS, sensitivity equations can either provided user can calculated using numerical interpolation solver. , included numerical interpolation version currently user specify sensitivity equations. However, future versions provide ability specify user-defined Jacobian well user-defined sensitivity equations. Also, currently, forward sensitivities calculated respect parameters system. plan provide future, ability specify specific particular parameters sensitivity desired. Currently, SIMULATENOUS STAGGERED methods sensitivity calculations SUNDIALS library supported package.","code":""},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"calculation-of-sensitivities-using-cvodes","dir":"Articles","previous_headings":"","what":"Calculation of Sensitivities using CVODES","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":", system ODEs defined using instructions provided , sensitivities can easily calculated using cvodes function using function call (entire code can found link) additional arguments cvodes specify senstivity calculation method used (STG STAGGERED SIM SIMULATENOUS) flag error control (either T F). output cvodes matrix number rows equal length time vector (time_vec) number columns equal length (y ×\\timesp + 1). first columns time. Currently, sensitivity every enitity calculated respect every parameter model. example, current model 3 entities (ODEs) 3 parameters, total 9 sensitivities calculated output time, .e. y1 w.r.t p1, p2, p3, y2 w.r.t. p1, p2, p3 . first 3 (length(y)) columns give sensitivity w.r.t first parameter, next 3 (length(y)) columns give sensitivity w.r.t second parameter . Sensitivity Matrix output systems equations described , first column gives output time, next 3 columns provide sensitivity y1, y2 y3 w.r.t first parameter (say p1), next three columns provide sensitivity y1, y2 y3 w.r.t. second parameter (p2) . output Sensitivity Matrix given . sensitivity values match values provided CVODES documentation. future, intend provide options select specific entities parameters respect sensitivities computed sensitivity matrix can get large medium large models.","code":"df1 <- cvodes(time_vec, IC, ODE_R , params, reltol, abstol,\"STG\",F)  ## using R df2 <- cvodes(time_vec, IC, ODE_Rcpp , params, reltol, abstol,\"STG\",F)  ## using Rcpp > df1        [,1]          [,2]          [,3]         [,4]         [,5]          [,6]          [,7]          [,8]          [,9]        [,10]  [1,] 0e+00  0.000000e+00  0.000000e+00 0.000000e+00 0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.000000e+00  [2,] 4e-01 -3.561085e-01  3.902252e-04 3.557183e-01 9.483149e-08 -2.132509e-10 -9.461823e-08 -1.573297e-11 -5.289692e-13 1.626194e-11  [3,] 4e+00 -1.876130e+00  1.792229e-04 1.875951e+00 2.961233e-06 -5.830758e-10 -2.960650e-06 -4.932970e-10 -2.762408e-13 4.935732e-10  [4,] 4e+01 -4.247395e+00  4.592812e-05 4.247349e+00 1.372964e-05 -2.357270e-10 -1.372941e-05 -2.288274e-09 -1.138015e-13 2.288387e-09  [5,] 4e+02 -5.958192e+00  3.545986e-06 5.958189e+00 2.273754e-05 -2.260807e-11 -2.273752e-05 -3.789554e-09 -4.994795e-14 3.789604e-09  [6,] 4e+03 -4.750132e+00 -5.991971e-06 4.750138e+00 1.880937e-05  2.312156e-11 -1.880939e-05 -3.134824e-09 -1.875976e-14 3.134843e-09  [7,] 4e+04 -1.574902e+00 -2.761679e-06 1.574905e+00 6.288404e-06  1.100645e-11 -6.288415e-06 -1.047876e-09 -4.536508e-15 1.047881e-09  [8,] 4e+05 -2.363168e-01 -4.584043e-07 2.363173e-01 9.450741e-07  1.832930e-12 -9.450760e-07 -1.574929e-10 -6.362045e-16 1.574935e-10  [9,] 4e+06 -2.566355e-02 -5.105587e-08 2.566361e-02 1.026491e-07  2.042044e-13 -1.026493e-07 -1.711080e-11 -6.851356e-17 1.711087e-11 [10,] 4e+07 -2.597859e-03 -5.190342e-09 2.597864e-03 1.039134e-08  2.076100e-14 -1.039136e-08 -1.732552e-12 -6.930923e-18 1.732559e-12 [11,] 4e+08 -2.601996e-04 -5.199259e-10 2.602002e-04 1.040802e-09  2.079717e-15 -1.040804e-09 -1.737821e-13 -6.951356e-19 1.737828e-13 [12,] 4e+09 -2.648142e-05 -5.616896e-11 2.648147e-05 1.059193e-10  2.246502e-16 -1.059195e-10 -1.804535e-14 -7.218146e-20 1.804542e-14 [13,] 4e+10 -2.899376e-06 -7.759920e-12 2.899383e-06 1.159764e-11  3.104024e-17 -1.159768e-11 -1.727574e-15 -6.910296e-21 1.727581e-15"},{"path":"http://sn248.github.io/sundialr/articles/my-vignette.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"sundialr - An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers","text":"package sundialr provides way interface famous SUNDIALS C library (provided Lawerence Livermore National Security) solver initial value problems. package allows system differential equations written R using Rcpp. Function cvode used solve initial value problems single initialization, problems multiple discontinuities solution can solved using cvsolve interface. sensitivities, currently, calculation forward sensitivities entities respect parameters model implemented cvodes function. ability select specific entities parameters sensitivities calculated added soon. solve system differential algebraic systems, ida function provided interface IDA function SUNDIALS. note, since package active development, interfaces CVODE CVODES (.e., function signatures) may change future versions. Please keep mind intend use sundialr applications. near future, interface solvers C library asIDAS ARKODE may also added.","code":""},{"path":"http://sn248.github.io/sundialr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Satyaprakash Nayak. Author, maintainer, copyright holder. Lawrence Livermore National Security. Copyright holder. Southern Methodist University. Copyright holder.","code":""},{"path":"http://sn248.github.io/sundialr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Satyaprakash Nayak (2023) sundialr package: Interface 'SUNDIALS'  Ordinary Differential Equation (ODE) Solvers. https://doi.org/10.5281/zenodo.5501631/","code":"@Misc{,   title = {The sundialr package: An Interface to 'SUNDIALS' Ordinary Differential Equation (ODE) Solvers},   year = {2023},   author = {Satyaprakash Nayak},   doi = {10.5281/zenodo.5501631},   url = {https://github.com/sn248/sundialr/}, }"},{"path":[]},{"path":"http://sn248.github.io/sundialr/index.html","id":"sundialr","dir":"","previous_headings":"","what":"sundialr","title":"An Interface to SUNDIALS Ordinary Differential Equation (ODE) Solvers","text":"sundialr wrapper around solvers SUNDIALS ODE solving C library produced Lawrence Livermore National Laboratory Southern Methodist University. information SUNDIALS can found . SUNDIALS one popular well-respected ODE solving libraries available sundialr provides way interface SUNDIALS solvers R. Currently sundialr provides interface serial versions cvode (solving ODES), cvodes (solving ODE sensitivity equations) ida (solving differential-algebraic equations) using Linear Solver (dense version). convenience function cvsolve provided allows solving system equations multiple discontinutities solution. application system equations simulate effect multiple bolus doses drug clinical pharmacokinetics. See vignette details.","code":""},{"path":[]},{"path":"http://sn248.github.io/sundialr/index.html","id":"release-015","dir":"","previous_headings":"What’s new?","what":"Release 0.1.5","title":"An Interface to SUNDIALS Ordinary Differential Equation (ODE) Solvers","text":"Updated upstream SUNDIALS version 7.1.1. Fixed pkgdown website bug assigning absolute tolerance equations. Fixed now.","code":""},{"path":"http://sn248.github.io/sundialr/index.html","id":"release-0141","dir":"","previous_headings":"What’s new?","what":"Release 0.1.4.1","title":"An Interface to SUNDIALS Ordinary Differential Equation (ODE) Solvers","text":"Fixed linking bug due multiple defined symbols. change.","code":""},{"path":"http://sn248.github.io/sundialr/index.html","id":"release-014","dir":"","previous_headings":"What’s new?","what":"Release 0.1.4","title":"An Interface to SUNDIALS Ordinary Differential Equation (ODE) Solvers","text":"version version 5.2.0 SUNDIALS (released March 2020) back end. new function cvsolve added. allows solving ODEs multiple discontinuities solution. See complete use case vignette. pkgdown create site package added. hex sticker package released!","code":""},{"path":"http://sn248.github.io/sundialr/index.html","id":"release-013","dir":"","previous_headings":"What’s new?","what":"Release 0.1.3","title":"An Interface to SUNDIALS Ordinary Differential Equation (ODE) Solvers","text":"version version 4.0.1 SUNDIALS (released Dec 2018) back end. interface CVODES added. calculates forward sensitivities w.r.t parameters ODE system. Parameters can now defined input parameter ODE function. allow performing parameter optimization via numerical optimizers.","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvode.html","id":null,"dir":"Reference","previous_headings":"","what":"cvode — cvode","title":"cvode — cvode","text":"CVODE solver solve stiff ODEs","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cvode — cvode","text":"","code":"cvode(   time_vector,   IC,   input_function,   Parameters,   reltolerance = 1e-04,   abstolerance = 1e-04 )"},{"path":"http://sn248.github.io/sundialr/reference/cvode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cvode — cvode","text":"time_vector time vector IC Initial Conditions input_function Right Hand Side function ODEs Parameters Parameters input ODEs reltolerance Relative Tolerance (scalar, default value  = 1e-04) abstolerance Absolute Tolerance (scalar vector length equal ydot (dy/dx), default = 1e-04)","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cvode — cvode","text":"data frame. First column time-vector, columns values y order provided.","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cvode — cvode","text":"","code":"# Example of solving a set of ODEs with cvode function # ODEs described by an R function ODE_R <- function(t, y, p){    # vector containing the right hand side gradients   ydot = vector(mode = \"numeric\", length = length(y))    # R indices start from 1   ydot[1] = -p[1]*y[1] + p[2]*y[2]*y[3]   ydot[2] = p[1]*y[1] - p[2]*y[2]*y[3] - p[3]*y[2]*y[2]   ydot[3] = p[3]*y[2]*y[2]    # ydot[1] = -0.04 * y[1] + 10000 * y[2] * y[3]   # ydot[3] = 30000000 * y[2] * y[2]   # ydot[2] = -ydot[1] - ydot[3]    ydot  }  # ODEs can also be described using Rcpp Rcpp::sourceCpp(code = '                  #include <Rcpp.h>                 using namespace Rcpp;                  // ODE functions defined using Rcpp                 // [[Rcpp::export]]                 NumericVector ODE_Rcpp (double t, NumericVector y, NumericVector p){                  // Initialize ydot filled with zeros                 NumericVector ydot(y.length());                  ydot[0] = -p[0]*y[0] + p[1]*y[1]*y[2];                 ydot[1] = p[0]*y[0] - p[1]*y[1]*y[2] - p[2]*y[1]*y[1];                 ydot[2] = p[2]*y[1]*y[1];                  return ydot;                  }')    # R code to genrate time vector, IC and solve the equations time_vec <- c(0.0, 0.4, 4.0, 40.0, 4E2, 4E3, 4E4, 4E5, 4E6, 4E7, 4E8, 4E9, 4E10) IC <- c(1,0,0) params <- c(0.04, 10000, 30000000) reltol <- 1e-04 abstol <- c(1e-8,1e-14,1e-6)  ## Solving the ODEs using cvode function df1 <- cvode(time_vec, IC, ODE_R , params, reltol, abstol)           ## using R df2 <- cvode(time_vec, IC, ODE_Rcpp , params, reltol, abstol)        ## using Rcpp  ## Check that both solutions are identical # identical(df1, df2)"},{"path":"http://sn248.github.io/sundialr/reference/cvodes.html","id":null,"dir":"Reference","previous_headings":"","what":"cvodes — cvodes","title":"cvodes — cvodes","text":"CVODES solver solve ODEs calculate sensitivities","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cvodes — cvodes","text":"","code":"cvodes(   time_vector,   IC,   input_function,   Parameters,   reltolerance = 1e-04,   abstolerance = 1e-04,   SensType = \"STG\",   ErrCon = \"F\" )"},{"path":"http://sn248.github.io/sundialr/reference/cvodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cvodes — cvodes","text":"time_vector time vector IC Initial Conditions input_function Right Hand Side function ODEs Parameters Parameters input ODEs reltolerance Relative Tolerance (scalar, default value  = 1e-04) abstolerance Absolute Tolerance (scalar vector length equal ydot, default = 1e-04) SensType Sensitivity Type - allowed values \"STG\" (Staggered, default) \"SIM\" (Simultaneous) ErrCon Error Control - allowed values TRUE FALSE (default)","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cvodes — cvodes","text":"data frame. First column time-vector, next y * p columns sensitivities y1 w.r.t parameters, y2 w.r.t parameters etc. y state vector, p parameter vector","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cvodes — cvodes","text":"","code":"# Example of solving a set sensitivity equations for ODEs with cvodes function # ODEs described by an R function ODE_R <- function(t, y, p){    # vector containing the right hand side gradients   ydot = vector(mode = \"numeric\", length = length(y))    # R indices start from 1   ydot[1] = -p[1]*y[1] + p[2]*y[2]*y[3]   ydot[2] = p[1]*y[1] - p[2]*y[2]*y[3] - p[3]*y[2]*y[2]   ydot[3] = p[3]*y[2]*y[2]    # ydot[1] = -0.04 * y[1] + 10000 * y[2] * y[3]   # ydot[3] = 30000000 * y[2] * y[2]   # ydot[2] = -ydot[1] - ydot[3]    ydot  }  # ODEs can also be described using Rcpp Rcpp::sourceCpp(code = '                  #include <Rcpp.h>                 using namespace Rcpp;                  // ODE functions defined using Rcpp                 // [[Rcpp::export]]                 NumericVector ODE_Rcpp (double t, NumericVector y, NumericVector p){                  // Initialize ydot filled with zeros                 NumericVector ydot(y.length());                  ydot[0] = -p[0]*y[0] + p[1]*y[1]*y[2];                 ydot[1] = p[0]*y[0] - p[1]*y[1]*y[2] - p[2]*y[1]*y[1];                 ydot[2] = p[2]*y[1]*y[1];                  return ydot;                  }')    # R code to genrate time vector, IC and solve the equations time_vec <- c(0.0, 0.4, 4.0, 40.0, 4E2, 4E3, 4E4, 4E5, 4E6, 4E7, 4E8, 4E9, 4E10) IC <- c(1,0,0) params <- c(0.04, 10000, 30000000) reltol <- 1e-04 abstol <- c(1e-8,1e-14,1e-6)  ## Solving the ODEs and Sensitivities using cvodes function df1 <- cvodes(time_vec, IC, ODE_R , params, reltol, abstol,\"STG\",FALSE)           ## using R df2 <- cvodes(time_vec, IC, ODE_Rcpp , params, reltol, abstol,\"STG\",FALSE)        ## using Rcpp  ## Check that both solutions are identical # identical(df1, df2)"},{"path":"http://sn248.github.io/sundialr/reference/cvsolve.html","id":null,"dir":"Reference","previous_headings":"","what":"cvsolve — cvsolve","title":"cvsolve — cvsolve","text":"CVSOLVE solver solve stiff ODEs discontinuties","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvsolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cvsolve — cvsolve","text":"","code":"cvsolve(   time_vector,   IC,   input_function,   Parameters,   Events = NULL,   reltolerance = 1e-04,   abstolerance = 1e-04 )"},{"path":"http://sn248.github.io/sundialr/reference/cvsolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cvsolve — cvsolve","text":"time_vector time vector IC Initial Conditions input_function Right Hand Side function ODEs Parameters Parameters input ODEs Events Discontinuities solution (DataFrame, default value NULL) reltolerance Relative Tolerance (scalar, default value  = 1e-04) abstolerance Absolute Tolerance (scalar vector length equal ydot, default = 1e-04)","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvsolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cvsolve — cvsolve","text":"data frame. First column time-vector, columns values y order provided.","code":""},{"path":"http://sn248.github.io/sundialr/reference/cvsolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cvsolve — cvsolve","text":"","code":"# Example of solving a set of ODEs with multiple discontinuities using cvsolve # A simple One dimensional equation, y = -0.1 * y # ODEs described by an R function ODE_R <- function(t, y, p){    # vector containing the right hand side gradients   ydot = vector(mode = \"numeric\", length = length(y))    # R indices start from 1   ydot[1] = -p[1]*y[1]    ydot  }  # R code to generate time vector, IC and solve the equations TSAMP <- seq(from = 0, to = 100, by = 0.1)      # sampling time points IC <- c(1) params <- c(0.1)  # A dataset describing the dosing at times at which additions to y[1] are to be done # Names of the columns don't matter, but they MUST be in the order of state index, # times and Values at discontinuity. TDOSE <- data.frame(ID = 1, TIMES = c(0, 10, 20, 30, 40, 50), VAL = 100) df1 <- cvsolve(TSAMP, c(1), ODE_R, params)         # solving without any discontinuity df2 <- cvsolve(TSAMP, c(1), ODE_R, params, TDOSE)  # solving with discontinuity"},{"path":"http://sn248.github.io/sundialr/reference/ida.html","id":null,"dir":"Reference","previous_headings":"","what":"ida — ida","title":"ida — ida","text":"IDA solver solve stiff DAEs","code":""},{"path":"http://sn248.github.io/sundialr/reference/ida.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ida — ida","text":"","code":"ida(   time_vector,   IC,   IRes,   input_function,   Parameters,   reltolerance = 1e-04,   abstolerance = 1e-04 )"},{"path":"http://sn248.github.io/sundialr/reference/ida.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ida — ida","text":"time_vector time vector IC Initial Value y IRes Inital Value ydot input_function Right Hand Side function DAEs Parameters Parameters input ODEs reltolerance Relative Tolerance (scalar, default value  = 1e-04) abstolerance Absolute Tolerance (scalar vector length equal ydot, default = 1e-04)","code":""},{"path":"http://sn248.github.io/sundialr/reference/ida.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ida — ida","text":"data frame. First column time-vector, columns values y order provided.","code":""}]
